#!/bin/bash
set -eo pipefail

SELF="${0##*/}"

function _script_echo	{ printf "[$(date)] $SELF[$$] $2 #$1\n" "${@:3}" >&2; }
function debug			{ [[ -z "$DEBUG" ]] || _script_echo DEBUG "$@"; }
function e				{ [[ -n "$QUIET" ]] || _script_echo INFO "$@"; }
function info			{ e "$@"; }
function warn			{ [[ -n "$QUIET" ]] || _script_echo WARNING "$@"; }
function warning		{ warn "$@"; }
function error			{ _script_echo ERROR "$@" >&2; }
function death			{ error "$@"; exit 1; }
function debug_call		{ debug 'call: %s' "$*"; "$@"; }
function nullify		{ "$@" >/dev/null 2>&1; }
function errnullify		{ "$@" 2>/dev/null; }

function os-type() {
	local -n ret="${1:?}"
	local given_ostype="${2:-$OSTYPE}"

	case "${given_ostype,,}" in
	  	linux*)  ret=linux ;;
	  	darwin*) ret=osx ;;
	esac
}

##
## Meat
##

shopt -s expand_aliases
alias dc=docker-compose

declare -a linux=()
declare -a osx=()

os-type os
declare -n stack="$os"

ns="${1:-127.0.0.69}"
tld="${2:-docker}"

function ensure-doxy {
	dc build
	dc kill && dc rm -fv || :
	dc up -d
}
stack+=(ensure-doxy)

function osx-ensure-resolv {
	e "Setting tld=%s to use nameserver=%s" "$tld" "$ns"
	sudo mkdir -pv /etc/resolver
	sudo tee "/etc/resolver/$tld" \
		>/dev/null \
		<<-EOF
			# Generated by $0 $@
			# on $(date)
			nameserver $ns
		EOF
}
osx+=(osx-ensure-resolv)

function linux-ensure-resolv {
	local fn="doxy-$tld"
	local dnsmasq_avail="/etc/dnsmasq.d-available/$fn"
	local dnsmasq_d="/etc/dnsmasq.d/$fn"

	error "Set the tld to resolve on your own, bruh."
	sudo tee "$dnsmasq_avail" \
		>/dev/null \
		<<-EOF
			# Generated by $0 $@
			# on $(date)
			server=/$tld/$ns
		EOF
	sudo ln -sfvr "$dnsmasq_avail" "$dnsmasq_d"
}
linux+=(linux-ensure-resolv)

function main {
	local current
	for current in "${stack[@]}"; do
	  	e "OS[%s]: %s" "$os" "$current"
	  	$current
	done

	e "Done."
}

main "$@"
